ggplot(comics, aes(x = align)) +
geom_bar() +
facet_wrap(~ gender, nrow = 1) +
theme(axis.text.x = element_text(angle = 45))
dir("data/")
# (a) read data
pie <- read.table("data/pie.txt")
# (a) read data
pie <- read.table("data/pies.txt")
# (a) read data
pie <- read.table("data/pies.txt")
# (a) read data
pie <- read.table("data/pies.txt")
pie
# (a) read data
pie <- read.table("data/pies.txt")
pie
# (a) read data
pie <- read.table("data/pies.txt") %>%
select(flavor) %>%
mutate(flavor = factor(flavor, levels = c("apple", "key lime", "boston creme", "blueberry", "cherry", "pumpkin", "strawberry")))
# (a) read data
pie <- read.table("data/pies.txt") %>%
select(flavor = V1) %>%
mutate(flavor = factor(flavor, levels = c("apple", "key lime", "boston creme", "blueberry", "cherry", "pumpkin", "strawberry")))
pie
# Create barchart of flavor
ggplot(pies, aes(x = flavor)) +
geom_bar(fill = "chartreuse") +
theme(axis.text.x = element_text(angle = 90))
# (a) read data
pies <- read.table("data/pies.txt") %>%
select(flavor = V1) %>%
mutate(flavor = factor(flavor, levels = c("apple", "key lime", "boston creme", "blueberry", "cherry", "pumpkin", "strawberry")))
# Create barchart of flavor
ggplot(pies, aes(x = flavor)) +
geom_bar(fill = "chartreuse") +
theme(axis.text.x = element_text(angle = 90))
dim(pies)
# (a) read data
pies <- read.table("data/pies.txt") %>%
select(flavor = V1) %>%
mutate(flavor = factor(flavor, levels = c("apple", "key-lime", "boston-creme", "blueberry", "cherry", "pumpkin", "strawberry")))
dim(pies)
# Create barchart of flavor
ggplot(pies, aes(x = flavor)) +
geom_bar(fill = "chartreuse") +
theme(axis.text.x = element_text(angle = 90))
# Create piechar of flavor
pie <- p1 + coord_polar("y", start = 1)
# Create barchart of flavor
p1 <- ggplot(pies, aes(x = flavor)) +
geom_bar(fill = "chartreuse") +
theme(axis.text.x = element_text(angle = 90))
p1
# Create piechar of flavor
pie <- p1 + coord_polar("y", start = 1)
pie
# Create barchart of flavor
p1 <- ggplot(pies, aes(x = flavor)) +
geom_bar(fill = "chartreuse") +
theme(axis.text.x = element_text(angle = 90))
p1
# Create piechar of flavor
pie <-
group_by(flavor) %>%
summarise(n = n())
# Create piechar of flavor
pies <-
group_by(flavor) %>%
summarise(n = n())
pies
pies <-
group_by(flavor)
pies
# Create piechar of flavor
class(pies)
dim(pies)
names(pies)
# (a) read data
pies <- read.table("data/pies.txt") %>%
select(flavor = V1) %>%
mutate(flavor = factor(flavor, levels = c("apple", "key-lime", "boston-creme", "blueberry", "cherry", "pumpkin", "strawberry"))) %>%
as_tibble()
dim(pies)
names(pies)
pies <-
group_by(flavor) %>%
summarise(n = n())
pies
pies <-
group_by(`flavor`) %>%
summarise(n = n())
names(pies)
pies <-
group_by(flavor) %>%
summarise(n = n())
pies <-
group_by(flavor) %>%
summarise(n())
# Create barchart of flavor
p1 <- ggplot(pies, aes(x = flavor)) +
geom_bar(fill = "chartreuse") +
theme(axis.text.x = element_text(angle = 90))
p1
# (a) read data
pies <- read.table("data/pies.txt") %>%
select(flavor = V1) %>%
mutate(flavor = factor(flavor, levels = c("apple", "key-lime", "boston-creme", "blueberry", "cherry", "pumpkin", "strawberry"))) %>%
as_tibble()
dim(pies)
names(pies)
class(pies)
# Create barchart of flavor
p1 <- ggplot(pies, aes(x = flavor)) +
geom_bar(fill = "chartreuse") +
theme(axis.text.x = element_text(angle = 90))
p1
ggplot(pies, aes(x = flavor)) +
geom_bar()
?geom_bar
ggplot(pies, aes(x = flavor)) +
geom_bar() +
coord_polar()
ggplot(pies, aes(x = flavor)) +
geom_bar() +
coord_polar("y")
ggplot(pies, aes(x = flavor)) +
geom_bar() +
coord_polar()
dir("data/")
read_csv("data/cars04.csv")
# (a) read data
cars <- read_csv("data/cars04.csv")
dim(cars)
names(cars)
summary(cars)
str(cars)
names(cars)
summary(cars)
# Create faceted histogram
ggplot(cars, aes(x = city_mpg)) +
geom_histogram() +
facet_wrap(~ suv)
# Create faceted histogram
ggplot(cars, aes(x = city_mpg)) +
geom_histogram() +
facet_wrap(~ suv)
unique(cars$ncyl)
table(cars$ncyl)
# Filter cars with 4, 6, 8 cylinders
common_cyl <- filter(cars, ncyl %in% c(4,6,8))
# Create box plots of city mpg by ncyl
ggplot(common_cyl, aes(x = as.factor(ncyl), y = city_mpg)) +
geom_boxplot()
# Create overlaid density plots for same data
ggplot(common_cyl, aes(x = city_mpg, fill = as.factor(ncyl))) +
geom_density(alpha = .3)
# Create hist of horsepwr
cars %>%
ggplot(aes(x = horsepwr)) +
geom_histogram() +
ggtitle("Horsepower Histogram")
# Create hist of horsepwr for affordable cars
cars %>%
filter(msrp < 25000) %>%
ggplot(aes(x = horsepwr)) +
geom_histogram() +
xlim(c(90, 550)) +
ggtitle("Horsepower Histogram for msrp < $25,000")
# Create hist of horsepwr
cars %>%
ggplot(aes(x = horsepwr)) +
geom_histogram() +
ggtitle("Distribution of Horsepower")
# Create hist of horsepwr for affordable cars
cars %>%
filter(msrp < 25000) %>%
ggplot(aes(x = horsepwr)) +
geom_histogram() +
xlim(c(90, 550)) +
ggtitle("Distribution of Horsepower for cars under $25,000")
# Create hist of horsepwr with binwidth of 3
cars %>%
ggplot(aes(x = horsepwr)) +
geom_histogram(binwidth = 3) +
ggtitle("Distribution of Horsepower with binwidth =3")
# Create hist of horsepwr with binwidth of 30
cars %>%
ggplot(aes(x = horsepwr)) +
geom_histogram(binwidth = 30) +
ggtitle("Distribution of Horsepower with binwidth =30")
# Create hist of horsepwr with binwidth of 60
cars %>%
ggplot(aes(x = horsepwr)) +
geom_histogram(binwidth = 60) +
ggtitle("Distribution of Horsepower with binwidth =60")
# Construct box plot of msrp
cars %>%
ggplot(aes(x = 1, y = msrp)) +
geom_boxplot()
# Exclude outliers from data
cars_no_out <- cars %>%
filter(msrp < 100000)
# Construct box plot of msrp using the reduced dataset
cars_no_out %>%
ggplot(aes(x = 1, y = msrp)) +
geom_boxplot()
# Create plot of city_mpg
cars %>%
# Create plot of city_mpg
cars %>%
ggplot(aes(x = 1, y = city_mpg)) +
geom_density()
# Create plot of city_mpg
cars %>%
ggplot(aes(x = 1, y = city_mpg)) +
geom_density()
cars
# Create plot of city_mpg
cars %>%
ggplot(aes(x = 1, y = city_mpg)) +
geom_boxplot()
# Create plot of width
cars %>%
ggplot(aes(x = 1, y = width)) +
geom_boxplot()
cars %>%
ggplot(aes(x =  width)) +
geom_density()
cars %>%
ggplot(aes(x = city_mpg)) +
geom_density()
s
cars %>%
ggplot(aes(x =  width)) +
geom_density()
# Create plot of city_mpg
cars %>%
ggplot(aes(x = 1, y = city_mpg)) +
geom_boxplot()
# Facet hists using hwy mileage and ncyl
common_cyl %>%
ggplot(aes(x = hwy_mpg)) +
geom_histogram() +
facet_grid(ncyl ~ suv, labeller = label_both) +
ggtitle("Distribution of Highway mileage by cylinder and suv ")
common_cyl %>%
ggplot(aes(x = hwy_mpg)) +
geom_density() +
facet_grid(ncyl ~ suv, labeller = label_both) +
ggtitle("Distribution of Highway mileage by cylinder and suv ")
# Facet hists using hwy mileage and ncyl
common_cyl %>%
ggplot(aes(x = hwy_mpg)) +
geom_histogram() +
facet_grid(ncyl ~ suv, labeller = label_both) +
ggtitle("Distribution of Highway mileage by cylinder and suv ")
dir("data/")
# (a) load data
gap2007 <- read_csv("data/life_exp_raw.csv")
summary(gap2007)
dim(gaps)
dim(gap2007)
# (a) load data
gapminder::gapminder
# (a) load data
gap2007 <- gapminder::gapminder %>% filter(year == 2007)
dim(gap2007)
summary(gap2007)
dim(gap2007)
summary(gap2007)
# Compute groupwise mean and median lifeExp
gap2007 %>%
group_by(continent) %>%
summarize(mean(lifeExp),
median(lifeExp))
# Generate box plots of lifeExp for each continent
gap2007 %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot()
# Compute groupwise measures of spread
gap2007 %>%
group_by(continent) %>%
summarize(sd(lifeExp),
IQR(lifeExp),
n())
# Generate overlaid density plots
gap2007 %>%
ggplot(aes(x = lifeExp, fill = continent)) +
geom_density(alpha = 0.3)
gap2007 %>%
table(continent, lifeExp)
# Compute groupwise measures of spread
gap2007 %>%
group_by(continent) %>%
summarize(sd(lifeExp),
IQR(lifeExp),
n())
# Compute groupwise mean and median lifeExp
gap2007 %>%
group_by(continent) %>%
summarize(mean(lifeExp),
median(lifeExp))
summary(gap2007)
# Compute stats for lifeExp in Americas
gap2007 %>%
filter(continent == "Americas") %>%
summarize(mean(lifeExp),
sd(lifeExp))
# Compute stats for population
gap2007 %>%
summarize(median(pop),
IQR(pop))
# Create density plot of old variable
gap2007 %>%
ggplot(aes(x = pop)) +
geom_density()
# Transform the skewed pop variable
gap2007 <- gap2007 %>%
mutate(log_pop = log(pop))
# Create density plot of new variable
gap2007 %>%
ggplot(aes(x = log_pop)) +
geom_density()
# Filter for Asia, add column indicating outliers
gap_asia <- gap2007 %>%
filter(continent == "Asia") %>%
mutate(is_outlier = lifeExp < 50)
# Remove outliers, create box plot of lifeExp
gap_asia %>%
filter(!is_outlier) %>%
ggplot(aes(x = 1, y = lifeExp)) +
geom_boxplot()
gap_asia %>%
#filter(!is_outlier) %>%
ggplot(aes(x = 1, y = lifeExp)) +
geom_boxplot()
# Remove outliers, create box plot of lifeExp
gap_asia %>%
filter(!is_outlier) %>%
ggplot(aes(x = 1, y = lifeExp)) +
geom_boxplot()
dir("data/")
email
install.packages("openItro")
install.packages("openIntro")
install.packages("openintro")
# install.packages("openintro")
libary(openintro) # Data sets and supplemental function from "OpenIntro" Textbooks
# install.packages("openintro")
library(openintro) # Data sets and supplemental function from "OpenIntro" Textbooks
email
# (a) dataset
summary(email)
head(email)
# (a) dataset
email <- email %>%
mutate(spam = factor(spam))
summary(email)
# (b)
email %>%
ggplot(aes(x = spam, y = num_char)) +
geom_boxplot()
# (c) density
email %>%
ggplot(aes(x = num_char, fill = spam)) +
geom_density(alpha = 0.5)
table(email$spam)
# (a) dataset
email <- email %>%
mutate(spam = factor(spam), levels = c(0, 1), labels = c("not-spam", "spam"))
# (a) dataset
email <- email %>%
mutate(spam = factor(spam, levels = c(0, 1), labels = c("not-spam", "spam")))
summary(email)
head(email)
table(email$spam)
# (b)  boxplot
email %>%
ggplot(aes(x = spam, y = num_char)) +
geom_boxplot()
# (c) density
email %>%
ggplot(aes(x = num_char, fill = spam)) +
geom_density(alpha = 0.5)
# Compute summary statistics
email %>%
group_by(spam) %>%
summarise(median(num_char),
IQR(num_char))
# Create plot
email %>%
mutate(log_num_char = log(num_char)) %>%
ggplot(aes(x = spam, y = log_num_char)) +
geom_boxplot()
# Compute summary statistics
email %>%
group_by(spam) %>%
summarise(median(num_char),
IQR(num_char))
email
email %>%
ggplot(aes(x = spam, y = exlaim_mess)) +
geom_boxplot()
email
email %>%
ggplot(aes(x = spam, y = exlaim_mess)) +
geom_boxplot()
names(email)
email %>%
group_by(spam) %>%
summarise(mean = mean(exlaim_mess))
email
email %>%
ggplot(aes(x = spam, y = exclaim_mess)) +
geom_boxplot()
email %>%
group_by(spam) %>%
summarise(median(exclaim_mess),
IQR(exclaim_mess))
# boxplot of raw values
email %>%
ggplot(aes(x = spam, y = exclaim_mess)) +
geom_boxplot()
# Compute center and spread for exclaim_mess by spam
email %>%
group_by(spam) %>%
summarise(median(exclaim_mess),
IQR(exclaim_mess))
# Create plot for spam and exclaim_mess
email %>%
mutate(log_exlaim_mess = log(exclaim_mess + 0.01)) %>%
ggplot(aes(x = log_exlaim_mess)) +
geom_histogram() +
facet_wrap(~spam)
email %>%
ggplot(aes(x = exlaim_mess)) +
geom_histogram() +
facet_wrap(~spam)
email %>%
ggplot(aes(x = exclaim_mess)) +
geom_histogram() +
facet_wrap(~spam)
# Compute center and spread for exclaim_mess by spam
email %>%
group_by(spam) %>%
summarise(median(exclaim_mess),
IQR(exclaim_mess))
# Create plot for spam and exclaim_mess
email %>%
mutate(log_exclaim_mess = log(exclaim_mess + 0.01)) %>%
ggplot(aes(x = log_exclaim_mess)) +
geom_histogram() +
facet_wrap(~spam)
email
table(email$image)
# Create plot of proportion of spam by image
email %>%
mutate(has_image = image > 0) %>%
ggplot(aes(x = has_image, fill = spam)) +
geom_bar(position = "fill")
names()          n())
names(email)
table(email$attach)
table(email$image)
table(email$attach)
sum(email$image >0)
sum(email$attach >0)
email %>%
filter(image > 0, attach > 0) %>%
summarise(sum(image == attach ))
email %>%
summarise(sum(image > attach ))
sum(email$image > email$attach)
email$dollar
table(email$number)
# Reorder levels
email$number <- factor(email$number, levels = c("none", "small", "big")
# Reorder levels
email$number <- factor(email$number, levels = c("none", "small", "big"))
table(email$number)
# Reorder levels
email$number <- factor(email$number, levels = c("none", "small", "big"))
# Construct plot of number
ggplot(email, aes(y = number)) +
geom_bar()
# Construct plot of number
ggplot(email, aes(x = number)) +
geom_bar()
# Construct plot of number
ggplot(email, aes(x = number)) +
geom_bar() +
facet_wrap(~spam)
# Construct plot of number
ggplot(email, aes(x = number)) +
geom_bar(position = "fill") +
facet_wrap(~spam)
# Construct plot of number
ggplot(email, aes(x = number)) +
geom_bar(position = "fill") +
ylab("proportion") +
facet_wrap(~spam)
# Construct plot of number
ggplot(email, aes(x = number)) +
geom_bar(position = "fill") +
facet_wrap(~spam) +
ylab("proportion")
# Construct plot of number
ggplot(email, aes(x = number)) +
geom_bar() +
facet_wrap(~spam)
