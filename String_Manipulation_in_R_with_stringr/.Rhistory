gender
age %R% gender
age_gender <- str_extract(narratives, pattern = age %R% unit %R% gender)
age_gender
age_gender <- str_extract(narratives, pattern = age %R% unit %R% gender)
# Replace age and units with ""
genders <- str_remove(age_gender, pattern = age %R% unit)
genders
# Replace extra space
str_remove_all(genders, pattern = one_or_more(SPC))
# Numeric ages, from previous step
ages_numeric <- as.numeric(str_extract(age_gender, age))
# Extract units
time_units <- str_extract(age_gender, pattern = unit)
# Extract first word character
time_units_clean <- str_extract(time_units, pattern = WRD )
# Turn ages in months to years
ifelse(time_units_clean == "Y", ages_numeric, ages_numeric/12)
email <- capture(one_or_more(WRD)) %R%
"@" %R% capture(one_or_more(WRD)) %R%
DOT %R% capture(one_or_more(WRD))
email
#
hero_contacts <- c("(wolverine@xmen.com)",  "wonderwoman@justiceleague.org", "thor@avengers.com")
# check match hasn't changed
str_view(hero_contacts, pattern = email)
#
hero_contacts <- c("(wolverine@xmen.com)",  "wonderwoman@justiceleague.org", "thor@avengers.com", "my123r@yahoo.com")
# check match hasn't changed
str_view(hero_contacts, pattern = email)
#
hero_contacts <- c("(wolverine@xmen.com)",  "wonderwoman@justiceleague.org", "thor@avengers.com", "my123@yahoo.com")
# check match hasn't changed
str_view(hero_contacts, pattern = email)
# Pull out match and captures
email_parts <- str_match(hero_contacts, pattern = email)
email_parts
WRD
?WRD
# Save host
host <- email_parts[, 3]
host
# save ID
email_id <- email_parts[, 2]
email_id
# create a text containing phone numbers
contact <- c("Call me at 555-555-0191",
"123 Main St",
"(555) 555 0191" ,
"Phone: 555.555.0191 Mobile: 555.555.0192")
# Add capture() to get digit parts
phone_pattern <- capture(three_digits) %R% zero_or_more(separator) %R% capture(three_digits) %R% zero_or_more(separator) %R% capture(four_digits)
phone_numbers <- str_match(contact, pattern = phone_pattern)
phone_numbers
# create a text containing phone numbers
contact <- c("Call me at 919-555-7890",
"123 Main St",
"(517) 321 0191" ,
"Phone: 923.555.0191 Mobile: 876.478.4567")
# Add capture() to get digit parts
phone_pattern <- capture(three_digits) %R% zero_or_more(separator) %R% capture(three_digits) %R% zero_or_more(separator) %R% capture(four_digits)
phone_numbers <- str_match(contact, pattern = phone_pattern)
phone_numbers
# create a text containing phone numbers
contact <- c("Call me at 919-555-7890",
"123 Main St",
"(517) 321 0191" ,
"Phone: 923.555.3256 Mobile: 876.478.4567")
phone_numbers <- str_match(contact, pattern = phone_pattern)
phone_numbers
str_match_all(contact, pattern = phone_pattern)
str_match_all(contact, pattern = phone_pattern) %>%
unlist()
str_match_all(contact, pattern = phone_pattern) %>%
bind_rows()
str_match_all(contact, pattern = phone_pattern) %>%
str_match_all(contact, pattern = phone_pattern)
head(narratives)
# build a pattern and add capture()
pattern <- capture(optional(DGT) %R% DGT) %R%
optional(SPC) %R% capture(or("YO", "YR", "MO")) %R%
optional(SPC) %R% capture(or("M", "F"))
#  pull out from narratives
str_match(narratives, pattern = pattern)
str_match(narratives, pattern = pattern) %>%
as.tibble()
str_match(narratives, pattern = pattern) %>%
as.tibble() %>%
mutate(V3 = str_extract(V3, pattern = WRD))
str_match(narratives, pattern = pattern) %>%
as.tibble() %>%
mutate(V3 = str_extract(V3, pattern = WRD),
V2 = ifelse(V3 == "Y", as.numeric(V2), as.numeric(V2)/12))
str_match(narratives, pattern = pattern) %>%
as.tibble() %>%
mutate(V3 = str_extract(V3, pattern = WRD),
V2 = ifelse(V3 == "Y", as.numeric(V2), as.numeric(V2)/12),
V4 = factor(V4, levels = c("M", "F"), labels = c("Male", "Female")))
str_match(narratives, pattern = pattern) %>%
as.tibble() %>%
mutate(V3 = str_extract(V3, pattern = WRD),
V2 = ifelse(V3 == "Y", as.numeric(V2), as.numeric(V2)/12),
V4 = factor(V4, levels = c("M", "F"), labels = c("Male", "Female"))) %>%
select(age_year = V2, sex = V4)
str_match(narratives, pattern = pattern) %>%
as.tibble() %>%
mutate(V3 = str_extract(V3, pattern = WRD),
V2 = ifelse(V3 == "Y", as.numeric(V2), as.numeric(V2)/12),
V4 = factor(V4, levels = c("M", "F"), labels = c("Male", "Female"))) %>%
select(sex = V4, age_year = V2)
str_match(narratives, pattern = pattern) %>%
as.tibble() %>%
mutate(V3 = str_extract(V3, pattern = WRD),
V2 = ifelse(V3 == "Y", as.numeric(V2), as.numeric(V2)/12),
V4 = factor(V4, levels = c("M", "F"), labels = c("Male", "Female"))) %>%
select(sex = V4, age_year = V2, raw = v1)
str_match(narratives, pattern = pattern) %>%
as.tibble() %>%
mutate(V3 = str_extract(V3, pattern = WRD),
V2 = ifelse(V3 == "Y", as.numeric(V2), as.numeric(V2)/12),
V4 = factor(V4, levels = c("M", "F"), labels = c("Male", "Female"))) %>%
select(sex = V4, age_year = V2, raw = V1)
# Edit to capture just Y and M in units
pattern2 <- capture(optional(DGT) %R% DGT) %R%
optional(SPC) %R% or("Y", "M") %R% or("O","R") %R%
optional(SPC) %R% capture(or("M", "F"))
# Check pattern
str_view(narratives, pattern = pattern2)
# Pull out pieces
str_match(narratives, pattern = pattern2)
# Edit to capture just Y and M in units
pattern2 <- capture(optional(DGT) %R% DGT) %R%
optional(SPC) %R% capture(or("Y", "M")) %R% or("O","R") %R%
optional(SPC) %R% capture(or("M", "F"))
pattern2
# Check pattern
str_view(narratives, pattern = pattern2)
# Pull out pieces
str_match(narratives, pattern = pattern2)
# Edit to capture just Y and M in units
pattern2 <- capture(optional(DGT) %R% DGT) %R%
optional(SPC) %R% capture(or("Y", "M")) %R% optional(or("O","R")) %R%
optional(SPC) %R% capture(or("M", "F"))
# Check pattern
str_view(narratives, pattern = pattern2)
# Pull out pieces
str_match(narratives, pattern = pattern2)
pattern2
str_view(c("hello", "sweet", "kitten"),
pattern = capture(LOWER) %R% REF1)
boy_names
map(boy_names, tolower)
map_dfc(boy_names, tolower)
map_chr(boy_names, tolower)
boy_names
boy_names <- map_chr(boy_names, tolower)
# names with three repeated letters
repeated_three_times <- capture(LoWER) %R% REF1 %R% REF1
# names with three repeated letters
repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1
repeated_three_times
# test it
str_view(boy_names, pattern = repeated_three_times)
# All to lower case
boy_names <- map_chr(boy_names, tolower)
# names with three repeated letters
repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1
# test it
str_view(boy_names, pattern = repeated_three_times)
# test it
str_view(boy_names, pattern = repeated_three_times, mmatch = TRUE)
# test it
str_view(boy_names, pattern = repeated_three_times, match = TRUE)
# Names with a pair of repeated letters
pair_of_repeated <- capture(LOWER %R% LOWER) %R% REF1
# Test it
str_view(boy_names, pattern = pair_of_repeated, match = TRUE)
# Names with a pair that reverses
pair_that_reverses <- capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1
# Test it
str_view(boy_names, pattern = pair_that_reverses, match = TRUE)
# Four letter palindrome names
four_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1)
four_letter_palindrome
# Test it
str_view(boy_names, pattern = four_letter_palindrome, match = TRUE)
args(str_replace)
# View text containing phone numbers
contact
# Replace digits with "X"
str_replace(contact, DGT, "X")
# Replace all digits with "X"
str_replace_all(contact, DGT, "X")
# Replace all digits with different symbol
str_replace_all(contact, DGT, c("X", ".", "*", "_"))
x <- c("hello", "sweet", "kitten")
str_replace(x, capture(ANY_CHAR), str_c(REF1, REF1))
# Build pattern to match words ending in "ING"
pattern <- one_or_more(WRD) %R% "ING"
str_view(narratives, pattern)
# Test replacement
str_replace(narratives, capture(pattern), str_c("CARELESSLY", REF1, sep = " "))
# One adverb per narrative
dir("data/")
# One adverb per narrative
adverbs <- read_rds("data/adverbs.rds")
adverbs_10 <- sample(adverbs, 10)
adverbs_10
# Replace "***ing" with "adverb ***ly"
str_replace(narratives, capture(pattern), str_c(adverbs_10, REF1, sep = " "))
adverbs_10
writeLines(x)
x <- c("\u00e8", "\u0065\u0300")
writeLines(x)
str_view(x, "\u00e8")
as.hexmode(utf8ToInt(stri_trans_nfd("\u00e8")))
as.hexmode(utf8ToInt(stri_trans_nfc("\u0065\u0300")))
as.hexmode(utf8ToInt(stringi::stri_trans_nfc("\u0065\u0300")))
as.hexmode(utf8ToInt(stringi::stri_trans_nfd("\u00e8")))
# Names with builtin accents
(tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
))
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
library(stringi)
x <- c("\u00e8", "\u0065\u0300")
writeLines(x)
str_view(x, "\u00e8")
as.hexmode(utf8ToInt(stringi::stri_trans_nfd("\u00e8")))
as.hexmode(utf8ToInt(stringi::stri_trans_nfc("\u0065\u0300")))
# Names with builtin accents
(tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
))
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
x <- c("Adele", "Ad\u00e8le", "Ad\u0065\u0300le")
writeLines(x)
str_view(x, "Ad" %R% ANY_CHAR %R% "le")
str_view(x, "Ad" %R% GRAPHEME %R% "le")
# tay_son_separate has been pre-defined
tay_son_separate
# View all the characters in tay_son_separate
str_view_all(tay_son_separate, pattern = ANY_CHAR )
# View all the graphemes in tay_son_separate
str_view_all(tay_son_separate, GRAPHEME)
# View all the characters in tay_son_separate
str_view_all(tay_son_separate, pattern = ANY_CHAR )
# View all the graphemes in tay_son_separate
str_view_all(tay_son_separate, GRAPHEME)
# Combine the diacritics with their letters
tay_son_builtin <- stri_trans_nfc(tay_son_separate)
tay_son_builtin
# View all the graphemes in tay_son_builtin
str_view_all(tay_son_builtin, GRAPHEME)
dir("data/")
earnest <- stri_read_lines("data/importance-of-being-earnest.txt")
head(earnest)
tail(earnest)
summary(earnest)
# Get rid of empty strings
stri_isempty(earnest)
# Get rid of empty strings
empty <- stri_isempty(earnest)
sum(empty)
earnest_2 <- earnest[!empty]
summary(earnest_2)
summary(earnest)
# Pattern for start, word then .
pattern_1 <- START %R% WRD %R% one_or_more(WRD) %R% DOT
pattern_1
# Test pattern_1
str_view(play_lines, pattern_1, match = TRUE)
# Test pattern_1
str_view(earnest_2, pattern_1, match = TRUE)
str_view(play_lines, pattern_1, match = FALSE)
play_lines <- earnest[!empty]
summary(play_lines)
# Pattern for start, word then .
pattern_1 <- START %R% WRD %R% one_or_more(WRD) %R% DOT
# Test pattern_1
str_view(play_lines, pattern_1, match = TRUE)
str_view(play_lines, pattern_1, match = FALSE)
# Pattern for start, word then .
pattern_1 <- START %R% one_or_more(WRD) %R% DOT
# Test pattern_1
str_view(play_lines, pattern_1, match = TRUE)
str_view(play_lines, pattern_1, match = FALSE)
# Pattern for start, capital, word then .
pattern_2 <-START %>% UPPERCASE
# Pattern for start, capital, word then .
pattern_2 <-START %>% UPPER
# Pattern for start, capital, word then .
pattern_2 <-START %>% UPPER(WRD)
# Pattern for start, capital, word then .
pattern_2 <-START %>% A-Z %>% one_of_more(WRD) %>% DOT
# Pattern for start, capital, word then .
pattern_2 <-START %>% one_of_more(WRD) %>% DOT
# Pattern for start, capital, word then .
pattern_2 <-START %>% one_or_more(WRD) %>% DOT
# Pattern for start, capital, word then .
pattern_2 <-START %R% one_or_more(WRD) %R% DOT
pattern_2
# Pattern for start, capital, word then .
pattern_2 <-START %R% UPPER %R% one_or_more(WRD) %R% DOT
pattern_2
# Test pattern_2
str_view(play_lines, pattern_2, match = TRUE)
str_view(play_lines, pattern_2, match = FALSE)
?one_of
?one_or_more
pattern_2
str_view(c("AAA.", pattern_2))
str_view(c("AAA.", "cddd"), pattern_2))
str_view(c("AAA.", "cddd"), pattern_2)
# Pattern for start, capital, word then .
pattern_2 <-START %R% [A-Z] %R% one_or_more(WRD) %R% DOT
?UPPER
<- c("a1 AA", "a1 a")
rx <- LOWER %R% DIGIT %R% SPACE %R% UPPER
x<- c("a1 AA", "a1 a")
rx <- LOWER %R% DIGIT %R% SPACE %R% UPPER
stringi::stri_detect_regex(x, rx)
?ascii_upper
# Pattern for start, capital, word then .
pattern_2 <-START %R% ascii_upper(1, 1) %R% one_or_more(WRD) %R% DOT
# Test pattern_2
str_view(play_lines, pattern_2, match = TRUE)
str_view(play_lines, pattern_2, match = FALSE)
str_view(c("AAA.", "cddd"), pattern_2)
# Pattern for start, capital, word then .
pattern_2 <-START %R% ascii_upper(1) %R% one_or_more(WRD) %R% DOT
# Test pattern_2
str_view(play_lines, pattern_2, match = TRUE)
str_view(play_lines, pattern_2, match = FALSE)
str_view(c("AAA.", "cddd"), pattern_2)
# Pattern for start, capital, word then .
pattern_2 <-START %R% ascii_upper() %R% one_or_more(WRD) %R% DOT
# Test pattern_2
str_view(play_lines, pattern_2, match = TRUE)
str_view(play_lines, pattern_2, match = FALSE)
str_view(c("AAA.", "cddd"), pattern_2)
# Get subset of lines that match
lines <- str_subset(play_lines,pattern = pattern_2 )
lines
lines[10:15]
# Extract match from lines
who <- str_extract(play_lines, pattern = pattern_2)
who[10:15]
who
# Let's see what we have
unique(who)
table(who)
# Get subset of lines that match
lines <- str_subset(play_lines,pattern = pattern_2 )
lines[10:15]
summary(lines)
# Extract match from lines
who <- str_extract(lines, pattern = pattern_2)
who
who[1:5]
sample(who, 5)
# Let's see what we have
unique(who)
table(who)
# Create vector of characters
characters <- c("Algernon", "Jack", "Lane", "Cecily", "Gwendolen", "Chasuble",
"Merriman", "Lady Bracknell", "Miss Prism")
# Match start, then character name, then .
pattern_3 <- START %R% or1(characters) %R% DOT
pattern_3
# View matches of pattern_3
str_view(play_lines, pattern_3, match = TRUE)
# View non-matches of pattern_3
str_view(play_lines, pattern_3, match = FALSE)
# Pull out matches
lines <- str_subset(play_lines, pattern = pattern_3)
lines[3:4]
# Extract match from lines
who <- str_extract(lines, pattern = pattern_3)
# Pull out matches
lines <- str_subset(play_lines, pattern = pattern_3)
lines[3:4]
# Extract match from lines
who <- str_extract(lines, pattern = pattern_3)
# Let's see what we have
unique(who)
# Count lines per character
table(who)
dir("data/")
catcidents <- read_rds("data/catcidents.rds")
# catcidents has been pre-defined
head(catcidents)
# Construct pattern of DOG in boundaries
whole_dog_pattern <- whole_word("DOG")
whole_dog_pattern
# See matches to word DOG
str_view(catcidents, whole_dog_pattern, match = TRUE)
# Transform catcidents to upper case
catcidents_upper <- str_to_upper(catcidents)
# View matches to word "DOG" again
str_view(catcidents_upper, whole_dog_pattern, match = TRUE)
# Which strings match?
has_dog <- str_detect(catcidents_upper, whole_dog_pattern)
has_dog
has_dog[3:7]
# Pull out matching strings in original
catcidents[has_dog]
x <- c("Cat", "CAT", "cAt")
str_view(x, "cat")
str_view(x, regex("cat", ignore_case = TRUE))
x <- c("Cat", "CAT", "cAt")
str_view(x, "cat")
str_view(x, regex("cat", ignore_case = TRUE))
# View matches to "TRIP"
str_view(catcidents, "TRIP", match = TRUE)
# Construct case insensitive pattern
trip_pattern <- regex("TRIP", ignore_case = TRUE)
# View case insensitive matches to "TRIP"
str_view(catcidents, trip_pattern, match = TRUE)
str_view(x, regex("cat", ignore_case = TRUE), match = TRUE)
x <- c("Cat", "CAT", "cAt")
str_view(x, "cat")
str_view(x, regex("cat", ignore_case = TRUE), match = TRUE)
regex("cat", ignore_case = TRUE)
regex("TRIP", ignore_case = TRUE)
# View case insensitive matches to "TRIP"
str_view(catcidents, trip_pattern, match = TRUE)
catcidents
# View case insensitive matches to "TRIP"
str_view(catcidents, trip_pattern, match = TRUE)
# read cat-related accidents
catcidents <- read_rds("data/catcidents.rds")
# catcidents has been pre-defined
head(catcidents)
# Construct pattern of DOG in boundaries
whole_dog_pattern <- whole_word("DOG")
whole_dog_pattern
# See matches to word DOG
str_view(catcidents, whole_dog_pattern, match = TRUE)
# Transform catcidents to upper case
catcidents_upper <- str_to_upper(catcidents)
# View matches to word "DOG" again
str_view(catcidents_upper, whole_dog_pattern, match = TRUE)
# Which strings match?
has_dog <- str_detect(catcidents_upper, whole_dog_pattern)
has_dog[3:7]
# Pull out matching strings in original
catcidents[has_dog]
# View case insensitive matches to "TRIP"
str_view(catcidents, trip_pattern, match = TRUE)
catcidents
# View matches to "TRIP"
str_view(catcidents, "TRIP", match = TRUE)
# Construct case insensitive pattern
trip_pattern <- regex("TRIP", ignore_case = TRUE)
# View case insensitive matches to "TRIP"
str_view(catcidents, trip_pattern, match = TRUE)
# Get subset of matches
trip <- str_subset(catcidents, trip_pattern)
# Extract matches
str_extract(trip, trip_pattern)
library(stringi)
# Get first five catcidents
cat5 <- catcidents[1:5]
# Take a look at original
writeLines(cat5)
# Transform to title case
writeLines(str_to_title(cat5))
# Transform to title case with stringi
writeLines(stri_trans_totitle(cat5, type = "word"))
# Transform to sentence case with stringi
writeLines(stri_trans_totitle(cat5, type = "sentence"))
?str_which
# Detect start and end lines
start <- str_which(earnest, "START OF THE PROJECT")
start
end <- str_which(earnest, "END OF THE PROJECT")
end
earnest[(start + 1), (end - 1)]
# Detect start and end lines
start <- str_which(earnest, "START OF THE PROJECT")
end <- str_which(earnest, "END OF THE PROJECT")
# Get rid of gutenberg intro text
earnest_sub  <- earnest[(start + 1):(end - 1)]
str_which(earnest_sub, "FIRST ACT")
# Take a look at the first 20 lines
writeLines(play_text)
# Detect first act
lines_start <- str_which(earnest_sub, "FIRST ACT")
# Set up index
intro_line_index <- 1:(lines_start - 1)
# Split play into intro and play
intro_text <- earnest_sub[intro_line_index]
play_text <- earnest_sub[-intro_line_index]
# Set up index
intro_line_index <- 1:(lines_start - 1)
# Take a look at the first 20 lines
writeLines(play_text)
