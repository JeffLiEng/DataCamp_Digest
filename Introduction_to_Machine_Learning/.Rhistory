train = shuffled[indices[i], ]
}
# set random seed
set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
indices =  sample(round(0.7 * n))
train = shuffled[indices, ]
test = shuffled[-indices, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf(conf))/sum(conf))
}
# set random seed
set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
indices =  sample(round(0.7 * n))
train = shuffled[indices, ]
test = shuffled[-indices, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf(conf))/sum(conf))
}
# set random seed
set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
indices =  sample(round(0.7 * n))
train = shuffled[indices, ]
test = shuffled[-indices, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
indices =  sample(round(0.7 * n))
train = shuffled[indices, ]
test = shuffled[-indices, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
indices =  sample(round(0.7 * n))
train = shuffled[indices, ]
test = shuffled[-indices, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
indices =  sample(round(0.7 * n))
train = shuffled[indices, ]
test = shuffled[-indices, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
for (i in 1:6) {
# generate 6 random training indices
indices =  sample(round(0.7 * n))
}
accs[i] =mean(indices)
for (i in 1:6) {
# generate 6 random training indices
indices =  sample(round(0.7 * n))
accs[i] =mean(indices)
}
accs
for (i in 1:6) {
# generate 6 random training indices
set.seed(i)
indices =  sample(round(0.7 * n))
accs[i] =mean(indices)
}
accs
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
set.seed(i)
indices =  sample(round(0.7 * n))
train = shuffled[indices, ]
test = shuffled[-indices, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
i = 1
indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
indices
i = 2
indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
indices
?slice
?seq
?rep
rep(1:6, 2)
rep(1:6, each = round(0.6*n))
rep(1:6, each = 2, len = 4)
rep(1:2, each = 2, len = 5)
indices =  rep(1:6, each = round(0.6 * n), len = n)
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:6, each = round(0.6 * n), len = n)
train = shuffled[-i, ]
test = shuffled[i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
i = 2
indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
indices
rep(1:6, )
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:6, each = round(0.6 * n), len = n)
train = shuffled[-i, ]
test = shuffled[i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:6, each = round(0.6 * n), len = n)
train = shuffled[indices != i, ]
test = shuffled[indices == i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
indices =  rep(1:6, each = round(0.6 * n), len = n)
indices
n
indices =  rep(1:6, each = round(1/6 * n), len = n)
indices
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:6, each = round(1/6 * n), len = n)
train = shuffled[indices != i, ]
test = shuffled[indices == i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
rep(1:6, len = n)
rep(1:6, len = n-1)
n
714/6
# set random seed
#set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:6, len = n)
train = shuffled[indices != i, ]
test = shuffled[indices == i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
# set random seed
set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:6, len = n)
train = shuffled[indices != i, ]
test = shuffled[indices == i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
# set random seed
set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:6, len = n)
train = shuffled[indices != i, ]
test = shuffled[indices == i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
mean(accs)
# set random seed
set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:6) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:10, len = n)
train = shuffled[indices != i, ]
test = shuffled[indices == i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
mean(accs)
# set random seed
set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
n <- nrow(titanic)
for (i in 1:10) {
# generate 6 random training indices
# indices =  (((i-1) * round((1/6) * n)) + 1):((i*round((1/6) * n)))
#
# train = shuffled[indices, ]
# test = shuffled[-indices, ]
indices =  rep(1:10, len = n)
train = shuffled[indices != i, ]
test = shuffled[indices == i, ]
tree = rpart(Survived ~ ., train, method = "class")
pred = predict(tree, test, type = "class")
# assign the confution matrix to conf
conf = table(test$Survived, pred)
# assign the accuracy of the model to the ith index
accs[i] = sum(diag(conf))/sum(conf)
}
accs
mean(accs)
22680/(22680-21420)
314900/2217
314900/2217*1521
knitr::opts_chunk$set(echo = TRUE)
install.packages("ZillowR")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# install.packages("ZillowR")
library(ZillowR)
set_zillow_web_service_id("X1-ZWz1gq0tzoj8cr_4zss3")
# Monthly Payment for "1709 S Rio Linda St, Visalia 93292 $314,900
GetMonthlyPayments(price = 314900L)
set_zillow_web_service_id("X1-ZWz1gq0tzoj8cr_4zss3")
# Monthly Payment for "1709 S Rio Linda St, Visalia 93292 $314,900
GetMonthlyPayments(price = 314900L)
set_zillow_web_service_id("X1-ZWz1gq0tzoj8cr_4zss3")
# Monthly Payment for "1709 S Rio Linda St, Visalia 93292 $314,900
GetMonthlyPayments(price = 314900L)
# Monthly Payment for "1709 S Rio Linda St, Visalia 93292 $314,900
ZillowR::GetMonthlyPayments(price = 314900L)
help(ZillowR)
# install.packages("ZillowR")
library(ZillowR)
GetChart(zpid = 48749425)
GetChart(zpid = 48749425, unit_type = 'dollar', width = 600, height = 300,
chartDuration = '10years')
GetComps(zpid = 48749425, count = 5, rentzestimate = TRUE)
GetDeepComps(zpid = 48749425, count = 5, rentzestimate = TRUE)
GetDeepSearchResults(address = '2114 Bigelow Ave', citystatezip = 'Seattle, WA', rentzestimate = TRUE)
GetMonthlyPayments(price = 300000L, zip = 98109)
?GetMonthlyPayments
GetMonthlyPayments(price = 300000L, zip = 98109, down = 10)
GetRateSummary(state = 'WA')
GetUpdatedPropertyDetails(zpid = 48749425)
GetZestimate(zpid = 48749425, rentzestimate = TRUE)
# install.packages("ZillowR")
devtools::install_github('fascinatingfingers/ZillowR')
install.packages("ZillowR")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# install.packages("ZillowR")
library(ZillowR)
GetChart(zpid = 48749425,
unit_type = 'dollar',
width = 600,
height = 300,
chartDuration = '10years')
# GetComps: Make request to Zillow API GetComps Web Service
GetComps(zpid = 48749425, count = 5, rentzestimate = TRUE)
# GetComps: Make request to Zillow API GetComps Web Service
GetComps(zpid = 48749425, count = 5, rentzestimate = TRUE)$response
# GetDeepComps: Make request to Zillow API GetDeepComps Web Service
GetDeepComps(zpid = 48749425, count = 5, rentzestimate = TRUE)
# GetDeepSearchResults: Make request to Zillow API GetDeepSearchResults Web Service
etDeepSearchResults(address = '1709 S Rio Linda St',
citystatezip = 'Visalia, CA',
rentzestimate = TRUE)
# GetDeepSearchResults: Make request to Zillow API GetDeepSearchResults Web Service
etDeepSearchResults(address = '1709 S Rio Linda St',
citystatezip = 'Visalia,',
rentzestimate = TRUE)
# GetDeepSearchResults: Make request to Zillow API GetDeepSearchResults Web Service
GetDeepSearchResults(address = '1709 S Rio Linda St',
citystatezip = 'Visalia,',
rentzestimate = TRUE)
# GetComps: Make request to Zillow API GetComps Web Service
GetComps(zpid = 69312864, count = 5, rentzestimate = TRUE)
GetChart(zpid = 69312864,
unit_type = 'dollar',
width = 600,
height = 300,
chartDuration = '10years')
# GetMonthlyPayments: Make request to Zillow API GetMonthlyPayments Web Service
GetMonthlyPayments(price = 300000L,
dollarsdown = 10000L,
zip = 93292,
url="https://www.zillow.com/mortgage/calculator/payment/ModernPaymentCalculatorAdvancedReportPage.htm")
# GetMonthlyPayments: Make request to Zillow API GetMonthlyPayments Web Service
GetMonthlyPayments(price = 300000L,
dollarsdown = 10000L,
zip = 93292,
url="https://www.zillow.com/mortgage-calculator/")
# GetMonthlyPayments: Make request to Zillow API GetMonthlyPayments Web Service
GetMonthlyPayments(price = 300000L,
dollarsdown = 10000L,
zip = 93292,
url = "http://www.zillow.com/webservice/GetMonthlyPayments.htm")
# GetMonthlyPayments: Make request to Zillow API GetMonthlyPayments Web Service
GetMonthlyPayments(price = 300000L,
dollarsdown = 10000L,
zip = 93292,
url = "http://www.zillow.com/webservice/GetMonthlyPayments.html")
# GetMonthlyPayments: Make request to Zillow API GetMonthlyPayments Web Service
GetMonthlyPayments(price = 300000L,
dollarsdown = 10000L,
zip = 93292,
url = "https://www.zillow.com/webservice/GetMonthlyPayments.htm")
# GetMonthlyPayments: Make request to Zillow API GetMonthlyPayments Web Service
GetMonthlyPayments(price = 300000L,
dollarsdown = 10000L,
zip = 93292,
url = "http://www.zillow.com/webservice/GetMonthlyPayments.htm")
# GetRateSummary: Make request to Zillow API GetRateSummary Web Service
GetRateSummary(state = "CA",
zws_id = getOption("ZillowR-zws_id"),
url = "http://www.zillow.com/webservice/GetRateSummary.htm")
# GetRateSummary: Make request to Zillow API GetRateSummary Web Service
GetRateSummary(state = 'CA',
zws_id = getOption("ZillowR-zws_id"),
url = "http://www.zillow.com/webservice/GetRateSummary.htm")
# GetRateSummary: Make request to Zillow API GetRateSummary Web Service
GetRateSummary(state = 'CA',
zws_id = getOption("ZillowR-zws_id"),
url = "https://www.zillow.com/mortgage-calculator/house-affordability/")
GetSearchResults(address = '4019 East Hillcrest Ave',
citystatezip = 'Visalia, CA',
rentzestimate = TRUE)
GetUpdatedPropertyDetails(zpid = 69312810,
zws_id = getOption("ZillowR-zws_id"),
url = "http://www.zillow.com/webservice/GetUpdatedPropertyDetails.htm")
GetUpdatedPropertyDetails(zpid = zpid,
zws_id = getOption("ZillowR-zws_id"),
url = "http://www.zillow.com/webservice/GetUpdatedPropertyDetails.htm")
GetUpdatedPropertyDetails(zpid = 48749425,
zws_id = getOption("ZillowR-zws_id"),
url = "http://www.zillow.com/webservice/GetUpdatedPropertyDetails.htm")
# GetDeepSearchResults: Make request to Zillow API GetDeepSearchResults Web Service
GetDeepSearchResults(address = '1709 S Rio Linda St',
citystatezip = 'Visalia,',
rentzestimate = TRUE)
GetUpdatedPropertyDetails(zpid = 69312864,
zws_id = getOption("ZillowR-zws_id"),
url = "http://www.zillow.com/webservice/GetUpdatedPropertyDetails.htm")
GetZestimate(zpid = 69312864,
rentzestimate = FALSE,
zws_id = getOption("ZillowR-zws_id"),
url = "http://www.zillow.com/webservice/GetZestimate.htm")
?between
