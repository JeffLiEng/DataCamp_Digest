{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"sparklyr::ml_classification_eval(spark_conn, fit_random_forest)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"ml_multiclass_classification_evaluator.spark_connection(spark_conn, \n    fit_random_forest)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"ml_ratify_args()","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"rlang::invoke(validator_fn, args = args_to_validate, nms = names(args))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"ml_validator_multiclass_classification_evaluator(args = `1`, \n    nms = `2`)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"args %>% ml_validate_args({\n    label_col <- ensure_scalar_character(label_col)\n    prediction_col <- ensure_scalar_character(prediction_col)\n    metric_name <- rlang::arg_match(metric_name, c(\"f1\", \"precision\",  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(quote(`_fseq`(`_lhs`)), env, env)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(quote(`_fseq`(`_lhs`)), env, env)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"`_fseq`(`_lhs`)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"freduce(value, `_function_list`)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"function_list[[i]](value)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"ml_validate_args(., {\n    label_col <- ensure_scalar_character(label_col)\n    prediction_col <- ensure_scalar_character(prediction_col)\n    metric_name <- rlang::arg_match(metric_name, c(\"f1\", \"precision\",  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"rlang::invoke(within, data = data, expr = validations, .bury = NULL)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (data, expr, ...) \nUseMethod(\"within\"))(data = list(x = structure(list(master = \"local[4]\", \n    method = \"shell\", app_name = \"sparklyr\", config = structure(list(\n        spark.env.SPARK_LOCAL_IP.local = \"127.0.0.1\", sparklyr.csv.embedded = \"^1.*\",  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"within.list(data = list(x = structure(list(master = \"local[4]\", \n    method = \"shell\", app_name = \"sparklyr\", config = structure(list(\n        spark.env.SPARK_LOCAL_IP.local = \"127.0.0.1\", sparklyr.csv.embedded = \"^1.*\", \n        sparklyr.cores.local = 4L, spark.sql.shuffle.partitions.local = 4L), config = \"default\", file = \"C:\\\\Users\\\\qfli\\\\Documents\\\\R\\\\win-library\\\\3.5\\\\sparklyr\\\\conf\\\\config-template.yml\"),  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(substitute(expr), e)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(substitute(expr), e)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"ensure_scalar_character(label_col)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stopf(\"'%s' is not %s\", deparse(substitute(object)), \"a length-one character vector\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stop(simpleError(sprintf(fmt, ...), if (call.) sys.call(sys.parent())))","line_number":0}],"message":"Error in stop(simpleError(sprintf(fmt, ...), if (call.) sys.call(sys.parent()))) : \n  bad error message\n"}