knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
library(broom)
library(rsample)
library(Metrics)
library(ranger)
three_players <- tibble(x = c(5, 15, 0), y = c(4, 10, 20))
dist(three_players)
# (c) create a sample dataset with different sclase of features
three <- tibble(hight = c(5, 1, 2), weight = c(90, 92, 79)
# (c) create a sample dataset with different sclase of features
three <- tibble(hight = c(5, 1, 2), weight = c(90, 92, 79))
dist(three)
# (c) create a sample dataset with different sclase of features
three <- tibble(hight = c(5, 1, 2), weight = c(90, 92, 79))
dist(three)
dist(scale(three))
dir("data/")
library(tidyverse)
library(dummies)
install.packages("dummies")
library(tidyverse)
library(dummies)
job_survey <- data.frame(job_satisfaction = c("Low", "Low", "Hi", "Low", "Mid"),
is_happy = c("No", "No", "Yes", "No", "No"))
# (a) Create a data frame
job_survey <- data.frame(job_satisfaction = c("Low", "Low", "Hi", "Low", "Mid"),
is_happy = c("No", "No", "Yes", "No", "No"))
# Dummify the Survey Data
dummy_survey <- dummy.data.frame(job_survey)
# Calculate the Distance
dist_survey <- dist(dummy_survey, method = "binary")
# Print the Distance Matrix
dist_survey
job_survey <- data.frame(job_satisfaction = c("Low", "Low", "Hi", "Low", "Mid"),
is_happy         = c("No", "No", "Yes", "No", "No"))
job_survey
dir("data/")
read_rds("data/lineup.rds")
# Calculate the Distance
dist_players <- dist(lineup)
# (a) read rds data file: the positions of 12 players
lineup <- read_rds("data/lineup.rds")
# Calculate the Distance
dist_players <- dist(lineup)
# Perform the hierarchical clustering using the complete linkage
hc_players <- hclust(dist_players, method = "complete")
# Calculate the assignment vector with a k of 2
clusters_k2 <- cutree(hc_players, k = 2)
# Create a new dataframe storing these results
lineup_k2_complete <- mutate(lineup, cluster = clusters_k2)
# Calculate the Distance
dist_players <- dist(lineup)
dist_players
lineup
# Perform the hierarchical clustering using the complete linkage
hc_players <- hclust(dist_players, method = "complete")
hc_players
# Calculate the assignment vector with a k of 2
clusters_k2 <- cutree(hc_players, k = 2)
clusters_k2
# Create a new dataframe storing these results
lineup_k2_complete <- mutate(lineup, cluster = clusters_k2)
lineup_k2_complete
?count
# Count the cluster assignments
count(lineup_k2_complete, cluster)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point()
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 2, alpha = 0.7)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7)
# Perform the hierarchical clustering using the complete linkage
hc_players <- hclust(dist_players, method = "average")
# Calculate the assignment vector with a k of 2
clusters_k2 <- cutree(hc_players, k = 2)
# Create a new dataframe storing these results
lineup_k2_complete <- mutate(lineup, cluster = clusters_k2)
# Count the cluster assignments
count(lineup_k2_complete, cluster)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7)
# Perform the hierarchical clustering using the complete linkage
hc_players <- hclust(dist_players, method = "average")
# Calculate the assignment vector with a k of 2
clusters_k2 <- cutree(hc_players, k = 2)
# Create a new dataframe storing these results
lineup_k2_complete <- mutate(lineup, cluster = clusters_k2)
# Count the cluster assignments
count(lineup_k2_complete, cluster)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7) +
labs(title = "Average Linkage")
# Perform the hierarchical clustering using the complete linkage
hc_players <- hclust(dist_players, method = "single")
# Calculate the assignment vector with a k of 2
clusters_k2 <- cutree(hc_players, k = 2)
# Create a new dataframe storing these results
lineup_k2_complete <- mutate(lineup, cluster = clusters_k2)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7) +
labs(title = "Average Linkage")
# (a) read rds data file: the positions of 12 players
lineup <- read_rds("data/lineup.rds")
# Calculate the Distance
dist_players <- dist(lineup)
# Perform the hierarchical clustering using the complete linkage
hc_players <- hclust(dist_players, method = "complete")
# Calculate the assignment vector with a k of 2
clusters_k2 <- cutree(hc_players, k = 2)
# Create a new dataframe storing these results
lineup_k2_complete <- mutate(lineup, cluster = clusters_k2)
# Count the cluster assignments
count(lineup_k2_complete, cluster)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7) +
labs(title = "Complete linkage")
# Perform the hierarchical clustering using the complete linkage
hc_players_single <- hclust(dist_players, method = "single")
# Calculate the assignment vector with a k of 2
clusters_k2_single <- cutree(hc_players_single, k = 2)
# Create a new dataframe storing these results
lineup_k2_single <- mutate(lineup, cluster = clusters_k2_single)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_single, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7) +
labs(title = "single Linkage")
# Perform the hierarchical clustering using the complete linkage
hc_players_average <- hclust(dist_players, method = "average")
# Calculate the assignment vector with a k of 2
clusters_k2_average <- cutree(hc_players_average, k = 2)
# Create a new dataframe storing these results
lineup_k2_average <- mutate(lineup, cluster = clusters_k2)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_average, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7) +
labs(title = "Average Linkage")
# Perform the hierarchical clustering using the complete linkage
hc_players_average <- hclust(dist_players, method = "average")
# Calculate the assignment vector with a k of 2
clusters_k2_average <- cutree(hc_players_average, k = 2)
# Create a new dataframe storing these results
lineup_k2_average <- mutate(lineup, cluster = clusters_k2)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_average, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7) +
labs(title = "Average Linkage")
# (a) read rds data file: the positions of 12 players
lineup <- read_rds("data/lineup.rds")
# Calculate the Distance
dist_players <- dist(lineup)
# Perform the hierarchical clustering using the complete linkage
hc_players_complete <- hclust(dist_players, method = "complete")
# Calculate the assignment vector with a k of 2
clusters_k2_complete <- cutree(hc_players, k = 2)
# Create a new dataframe storing these results
lineup_k2_complete <- mutate(lineup, cluster = clusters_k2_complete)
# Count the cluster assignments
count(lineup_k2_complete, cluster)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7) +
labs(title = "Complete linkage")
# Perform the hierarchical clustering using the complete linkage
hc_players_average <- hclust(dist_players, method = "average")
# Calculate the assignment vector with a k of 2
clusters_k2_average <- cutree(hc_players_average, k = 2)
# Create a new dataframe storing these results
lineup_k2_average <- mutate(lineup, cluster = clusters_k2_average)
# Plot the positions of the players and color them using their cluster
ggplot(lineup_k2_average, aes(x = x, y = y, color = factor(cluster))) +
geom_point(size = 4, alpha = 0.7) +
labs(title = "Average Linkage")
plot(hc_players_complete)
par(mfrow = c(1, 3))
plot(hc_players_complete)
plot(hc_players_single)
plot(hc_players_average)
library(dendextend)
dist_players <- dist(lineup, method = 'euclidean')
hc_players <- hclust(dist_players, method = "complete")
# Create a dendrogram object from the hclust variable
dend_players <- as.dendrogram(hc_players)
# Plot the dendrogram
plot(dend_players)
# Color branches by cluster formed from the cut at a height of 20 & plot
dend_20 <- color_branches(dend_players, h = 20)
# Plot the dendrogram with clusters colored below height 20
plot(dend_20)
# Color branches by cluster formed from the cut at a height of 40 & plot
dend_40 <- color_branches(dend_players, h = 40)
# Plot the dendrogram with clusters colored below height 40
plot(dend_40)
dist_players <- dist(lineup, method = 'euclidean')
hc_players <- hclust(dist_players, method = "complete")
# Calculate the assignment vector with a h of 20
clusters_h20 <- cutree(hc_players, h = 20)
# Create a new dataframe storing these results
lineup_h20_complete <- mutate(lineup, cluster = clusters_h20)
# Calculate the assignment vector with a h of 40
clusters_h40 <- cutree(hc_players, h = 40)
# Create a new dataframe storing these results
lineup_h40_complete <- mutate(lineup, cluster = clusters_h40)
# Plot the positions of the players and color them using their cluster for height = 20
ggplot(lineup_h20_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point()
# Plot the positions of the players and color them using their cluster for height = 40
ggplot(lineup_h40_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point()
dist_players <- dist(lineup, method = 'euclidean')
hc_players <- hclust(dist_players, method = "complete")
# Calculate the assignment vector with a h of 20
clusters_h20 <- cutree(hc_players, h = 20)
# Create a new dataframe storing these results
lineup_h20_complete <- mutate(lineup, cluster = clusters_h20)
# Calculate the assignment vector with a h of 40
clusters_h40 <- cutree(hc_players, h = 40)
# Create a new dataframe storing these results
lineup_h40_complete <- mutate(lineup, cluster = clusters_h40)
par(mfrow = c(1, 2))
# Plot the positions of the players and color them using their cluster for height = 20
ggplot(lineup_h20_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point()
# Plot the positions of the players and color them using their cluster for height = 40
ggplot(lineup_h40_complete, aes(x = x, y = y, color = factor(cluster))) +
geom_point()
dir("data/")
customers_spend <- read_rds("data/ws_customers.rds")
summary(customers_spend)
# (a) read data
dir("data/")
customers_spend <- read_rds("data/ws_customers.rds")
# summary of data
summary(customers_spend)
# Distribution of data
customers_spend %>%
gather(key = "Items", value = "spent", Milk:Frozen) %>%
ggplot(aes(x = spent, color = Items)) +
geom_density()
# Calculate Euclidean distance between customers
dist_customers <- dist(customers_spend)
dist_customers
# Generate a complete linkage analysis
hc_customers <- hclust(dist_customers, method = "complete")
# Plot the dendrogram
plot(hc_customers)
# Create a cluster assignment vector at h = 15000
clust_customers <- cutree(hc_customers, h = 15000)
# Generate the segmented customers dataframe
segment_customers <- mutate(customers_spend, cluster = clust_customers)
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
group_by(cluster) %>%
summarise_all(funs(mean(.)))
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
group_by(cluster) %>%
summarise_all(mean))
?summarise_all
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
group_by(cluster) %>%
summarise_all(funs(mean = mean)))
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
group_by(cluster) %>%
summarise_all(funs(mean(.)))
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Calculate the mean for each category
segment_customers %>%
group_by(cluster) %>%
summarise_all(c("mean")))
segment_customers
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster) %>%
summarise(mean(spent)
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster) %>%
summarise(mean(spent))
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster, items) %>%
summarise(mean(spent))
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster, items) %>%
summarise(n(),
mean(spent))
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster, items) %>%
summarise(n = n(),
mean = mean(spent))
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster, items) %>%
summarise(n = n(),
mean = mean(spent)) %>%
gather(key = "key", value = "value", n:mean)
?unite
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster, items) %>%
summarise(n = n(),
mean = mean(spent)) %>%
gather(key = "key", value = "value", n:mean) %>%
unite(items_stat, items:key)
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster, items) %>%
summarise(n = n(),
mean = mean(spent)) %>%
gather(key = "key", value = "value", n:mean) %>%
unite(items_stat, items:key) %>%
spread(key = items_stat, value = value)
# Count the number of customers that fall into each cluster
count(segment_customers, cluster)
# Color the dendrogram based on the height cutoff
dend_customers <- as.dendrogram(hc_customers)
dend_colored <- color_branches(dend_customers, h = 15000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate the mean for each category
segment_customers %>%
gather(key = "items", value = "spent", Milk:Frozen) %>%
group_by(cluster, items) %>%
summarise(n = n(),
mean = mean(spent)) %>%
gather(key = "key", value = "value", n:mean) %>%
unite(items_stat, items:key) %>%
spread(key = items_stat, value = value) %>%
select(cluster,
n = Frozen_n,
ends_with("mean"))
